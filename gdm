#!/usr/bin/env zsh

# Copyright (c) 2022, Jeff Russ
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted (subject to the limitations in the
# disclaimer below) provided that the following conditions are met:
# 
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.

#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
#
#  * Neither the name of <Owner Organization> nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 


GDM_VERSION="v1.0beta1"
REMOVE_UNTRACKED_GLOBS=false


gdm_conf_template() {
cat << 'CONFDOC'
#!/usr/bin/env zsh
export GDM_MODULES_DIRNAME="gdm_modules" 
gdm_conf_ver() { echo "v1.0beta1" } # DO NOT REMOVE

# Each non-commented row in CONF_DOC is parameterized (by same delimiting rules 
#   as arguments to shell command: the delimiter is any non-quoted space(s)) 
#   
# 1st parameter: REPOSITORY
#   This is the remote url of the repository dependency or an abbreviation of it.
#   Unabbreviated: it should be in the url format passed to `git clone`.
#   for example: "https://domain.com/username/reponame.git"
#   Abbreviated: all of the following will be interpreted as the above:
#   "domain.com/username/reponame.git" OR "domain.com/username/reponame"
#   OR "username/reponame.git" OR JUST "username/reponame"
#   
# 2nd parameter: BRANCH (optional: empty quotes "" uses default branch) 
#   The branch name you want to use. Default: usually  "main" or "master".
#   
# 3rd parameter: COMMIT_SEARCH (optional: pass empty quotes "" to skip) 
#   Typically used to require an older version of the repository, this 
#   can either be any substring found in the git log as formatted by:   
#     git --no-pager log --tags --pretty='%h%d %as (%an) %s'
#   which you can run to see more details. A more preferred way to use this
#   parameter is a special syntax: "(tag: <tagvalue>)" for example:
#     "(tag: v1.2)"
#   searches a git long only showing commits with tags shown by
#     git --no-pager log --no-walk --tags --oneline --pretty='%h%d %as (%an) %s'
#   This actually searches for  "(tag: v1.2" without the closing ')'
#   because often something is inserted before it in the log that 
#   is not part of the actual tag. 
#   
# 4th parameter: REPO_DIRNAME (optional: pass empty quotes "" for default) 
#   if not provided, the repos will be cloned (if not already) to the 
#   new directory which defaults to the <reponame>. Skipping this parameter
#   means that if you require two different branches or commits from the same
#   repo accross multiple project, `gdm --conf` will need to be run each time
#   to ensure the single stored repo is in the correct state. This takes 
#   more time as drive space. It also means requiring two versions at once 
#   (such as in the same probject or two you may have open at once) is impossible.
#   For this reason, this 4th parameter enables you to have two states of the
#   same repository installed at once by cloning it to a distinct directory name.
# 
# 5th parameter: PRELINK_HOOK (optional: pass empty quotes "" to skip) is the name 
#   of a shell command or function you request to be run after the given 
#   dependency is set up (cloned to $GDM_GLOB_STORE_PATH, and with proper branch 
#   and commit switched to) but before it is linked to the the project depending 
#   on it. This may be useful for any setup you needed per-dependency, such 
#   as building  from source. You can define these commands a functions in this 
#   file or anywhere, so long as it is available in the shell session. 
#   This function expects the following four arguments:
#     $GDM_GLOB_STORE_PATH   $repo_dirname   $project_path   $GDM_MODULES_DIRNAME
#   The linker takes these same arguments copies (as hard links):
#     $GDM_GLOB_STORE_PATH/$repo_dirname/*
#       TO 
#     $project_path/$GDM_MODULES_DIRNAME/$repo_dirname/*
#
# Normally you should not pass a sixth parameter because doing so bypasses the 
#   call gdm_linker, which links the cloned repository to your 
#   <project-root>/$GDM_MODULES_DIRNAME, where GDM_MODULES_DIRNAME="gdm_modules"
#   by default. Bypasssing the linker by specifying "" as this sixth parameter 
#   is not recommended but you may wish to do something after the linking which, 
#   can be achieved by passing another callable (again, expecting the same arguments 
#   as the fifth parameter) and adding:
#       gdm_linker $@
#   as the first line in your callable so that the linker is called, followed by 
#   your custom actions.
cat << 'CONF_DOC'
# REPOSITORY                      BRANCH  COMMIT_SEARCH  REPO_DIRNAME  PRELINK_HOOK  LINK_BYPASS
# -------------------- EXAMPLE ENTRIES --------------------------------------------------------
# juce-framework/JUCE              develop  tag="7.0.0"     JUCE_v7
# Jeff-Russ/git-dependency-manager 
CONF_DOC

# example_prelink_hook(){
#   # do things
#   # return 0 for success or nonzero to fail
# } 

# example_postlink_hook(){
#   gdm_linker $@
#   # do things
#   # return 0 for success or nonzero to fail
# } 
CONFDOC
}

gdm () {
  local CALLER_DIR=$(pwd)

  declare -A ARGS # all valid argument go here (except --help).
  ARGS[initialize]='^[-]{0,2}init.*$'
  ARGS[configure]='^[-]{0,2}conf.*$'
  ARGS[set_store_path]='^[-]{0,2}(set-)?(-gdm|-GDM)?(glob[-_]store|GLOB[-_]STORE|glob|GLOB|store|STORE)([-_]path|[-_]PATH)?(=.+)?$'
  ARGS[clean_store]='^[-]{0,2}clean([=-]store|[=-]glob|[=-]global)$'
  ARGS[list_modules]='^[-]{0,2}(list|ls)([=-]modules|[=-]local)?$'
  ARGS[list_store]='^[-]{0,2}(list|ls)([=-]store|[=-]glob|[=-]global)$'

  # An anonymous function (self executing) to check for invalid arguments:
  local not_valid_arg='() {
    for f in $ARGS ; do
      [[ "$1" =~ $f ]] && return 1;
    done;
    return 0;
  }'

  if eval ${not_valid_arg} "$1" ; then
    printf "Usage:\n  ./gdm init   # will generate empty configuration file for your project\n  ./gdm conf   # will read file and perform configuration.\n"
    printf "\nBy default, dependencies are installed (cloned to) ~/gdm_glob_store/ \nwith hard links to them in each <project-root>/gdm_modules/\n"
    printf "\nYou can choose your own global location for your machine by\nmodifying your rc file (for example, ~/.zshrc):\n"
    printf "  export GDM_GLOB_STORE_PATH=\"/desired/path/to/directory/\"\n"
    printf "You can choose your own location within a given probject by modifying the line:\n"
    printf "  export GDM_MODULES_DIRNAME=\"gdm_modules\"\nin your project's gdm_conf.zsh file.\n"
    return 0
  fi

  gdm-verify-paths() {
    ! (($@[(Ie)--quiet-pass])) && printf "Verifying all required paths...\n"
    local project_path="$1"

    local glob_path_was_unset=false

    if ! (( ${+GDM_GLOB_STORE_PATH} )) ; then
      export GDM_GLOB_STORE_PATH="$HOME/gdm_glob_store"
      glob_path_was_unset=true
    fi

    if ! [ -d "$GDM_GLOB_STORE_PATH" ] ; then # make the directory
      printf "  $(_S B)mkdir ${GDM_GLOB_STORE_PATH}\n$(_S)"
      if ! mkdir "$GDM_GLOB_STORE_PATH" ; then 
        printf "$(_S R S)ERROR: $(_S E)mkdir ${GDM_GLOB_STORE_PATH} failed.\n$(_S)" >&2 
        unset GDM_GLOB_STORE_PATH
        return 1
      fi
      printf "$(_S B)  echo \"$GDM_VERSION\" > \$GDM_GLOB_STORE_PATH/GDM_MANIFEST\n$(_S)"
      echo "$GDM_VERSION" > "${GDM_GLOB_STORE_PATH}/GDM_MANIFEST"
    fi

    if $glob_path_was_unset ; then # write to rc file should be after we know if making it failed
      # https://stackoverflow.com/questions/20572934/get-the-name-of-the-caller-script-in-bash-script
      if ! CALLER_SHELL=$(ps -o comm= $PPID) ; then
        if ! CALLER_SHELL=$(ps $PPID | tail -n 1 | awk "{print \$5}") ; then
          CALLER_SHELL="zsh"
        fi
      fi
      CALLER_SHELL=${CALLER_SHELL:t:r} 
      local rcfile="${HOME}/.${CALLER_SHELL}rc"
      if ! grep -sq '^[^#]*export GDM_GLOB_STORE_PATH=[^#][^#][^#]' "$rcfile" ; then
        ! [ -f "$rcfile" ] && touch "$rcfile"
        printf "$(_S D)$CALLER_SHELL shell detected. Appending to ${rcfile}:\n"
        printf "  $(_S M)export GDM_GLOB_STORE_PATH=\"\$HOME/gdm_glob_store\"\n$(_S)"
        echo "\\nexport GDM_GLOB_STORE_PATH=\"\$HOME/gdm_glob_store\"" >> "$rcfile"
      fi
    else
      printf "GDM_GLOB_STORE_PATH=${GDM_GLOB_STORE_PATH}\n"
    fi

    if ! (( ${+GDM_MODULES_DIRNAME} )) ; then # when unset? when gdm_config was not read or did not export it.
      ! (($@[(Ie)--quiet-pass])) && printf "  $(_S D)setting GDM_MODULES_DIRNAME \n$(_S)"
      export GDM_MODULES_DIRNAME="gdm_modules"
    fi
    if ! [[ -z  "$project_path" ]] && ! [ -d "${project_path}/${GDM_MODULES_DIRNAME}" ]; then 
      printf "  $(_S B)mkdir ./${GDM_MODULES_DIRNAME}\n$(_S)"
      if ! mkdir "${project_path}/${GDM_MODULES_DIRNAME}" ; then
        printf "$(_S R S)ERROR: $(_S E)mkdir ./${GDM_MODULES_DIRNAME} failed.\n$(_S)" >&2 
        return 1;
      fi
      printf "$(_S B)  echo \"$GDM_VERSION\" > ./${GDM_MODULES_DIRNAME}/GDM_MANIFEST\n$(_S)"
      echo "$GDM_VERSION" > "${project_path}/${GDM_MODULES_DIRNAME}/GDM_MANIFEST"
      printf "  $(_S B)echo \"/*\" > \"./${GDM_MODULES_DIRNAME}/.gitignore$(_S)"
      echo "/*" > "${project_path}/${GDM_MODULES_DIRNAME}/.gitignore" # gitignore GDM_MODULES_DIRNAME/*
    fi
    return 0
  }

  #___________________________________________________________________________________________
  # Generate template of gdm_conf.zsh (although they could just make it themselves)
  if [[ "$1" =~ ${ARGS[initialize]} ]] ; then 
    local gdm_conf_file="${CALLER_DIR}/gdm_conf.zsh"
    [[ -f "$gdm_conf_file" ]] && grep -q '[^[:space:]]' "$gdm_conf_file" && 
      printf "./gdm_conf.zsh already exists and is not empty!\nTo run file's configuration:\n  gdm --conf\n" >&2 && 
      return 1;
    gdm_conf_template > "${CALLER_DIR}/gdm_conf.zsh"
    printf "${CALLER_DIR}/gdm_conf.zsh configuration file generated.\n"
    return 0

  #___________________________________________________________________________________________
  # Read currently existing configuration file and set up all dependencies 
  # (usually for a given project unless they bypass the gdm_linker)
  elif [[ "$1" =~ ${ARGS[configure]} ]] ;then 
    
    # ! [[ -f "./gdm_conf.zsh" ]] && printf "$(_S R S)ERROR: $(_S E)No \"gdm_conf.zsh\" file was found! \n$(_S)" >&2 && return 1;
    # source ./gdm_conf.zsh

    ! _gdm_conf_params readfile "$gdm_conf_filename_default" && return 1;

    ! gdm-verify-paths "$CALLER_DIR" "--quiet-pass" && return 1;

    local errors=() # for displaying summary after entire operation is complete.
    LINKED_MODULES=() # keep track of directories in "${CALLER_DIR}/${GDM_MODULES_DIRNAME}/*"
                      # actually required so we can delete unneeded ones aftewards.
    printf "\n"

    req_num=1
    while req=$(_gdm_conf_params "req[$req_num]" --quiet) ; do

      eval "req_params=( $req )"
      local remote_url="${req_params[1]}"
      [[ $remote_url == "#" ]] && continue
      printf "------------------------------------------------------------\n"
      printf "      Requirement #${req_num} from ${gdm_conf_filename_default}:\n"
      (( req_num++ ))

      local branch="${req_params[2]}"
      local commit="${req_params[3]}"
      local repo_dirname="${req_params[4]}"
      local pre_link_hook="${req_params[5]}"
      local linker_bypass_hook="${req_params[6]}"

      
      local req_details="$(_S C S)${req_params[1]}$(_S D) branch=$(_S C S)$branch$(_S D) dir=$(_S C S)$repo_dirname$(_S)"
      ! [[ -z $pre_link_hook ]] && req_details="$req_details $(_S D)pre_link_hook=$(_S C S)$pre_link_hook$(_S)"
      ! [[ -z $linker_bypass_hook ]] && req_details="$req_details $(_S D)linker_bypass_hook=$(_S C S)$linker_bypass_hook$(_S)"
      printf "$req_details \n"
      
      
      #.... clone repo or cd to it and find branch ..................................

      ! cd "$GDM_GLOB_STORE_PATH" && printf "FATAL ERROR: cd $GDM_GLOB_STORE_PATH FAILED\n" >&2 && return 1;

      if ! [ -d "${GDM_GLOB_STORE_PATH}/${repo_dirname}" ] ; then 
        # validate that $remote_url can be cloned and clone
        remote_url=$(git_expand_remote_url "$remote_url")

        printf "  $(_S B)git clone ${remote_url} \"\$GDM_GLOB_STORE_PATH/${repo_dirname}\"\n$(_S D)"
        printf "  Please wait. This may take a while...."
        if [[ -z "$remote_url" ]] || ! git clone "$remote_url" "$repo_dirname" --quiet ; then
          errors+=("  $(_S R)Skipped:$(_S E)${req_params}\n   Reason: Cannot clone \"$remote_url\"\n$(_S)")
          printf "\n$(_S R S)ERROR: $(_S E)Cannot clone \"$remote_url\"\n$(_S)" >&2 && continue
        fi
        printf "$(_S)\n"
      else
        printf "  $(_S D)Previous installation found in \$GDM_GLOB_STORE_PATH/${repo_dirname}\n$(_S)"
      fi
      cd "$repo_dirname"

      #....  find branch ................................................................
      
      local remote_names=("${(f)$(git remote)}")
      local origin_name=$( (($remote_names[(Ie)origin])) && echo origin || echo "${remote_names[1]}" )

      if [[ "$branch" != "$current_branch" ]] ; then
        local loc_branches=("${(f)$(git branch --format='%(refname:short)')}")
        if ! (($loc_branches[(Ie)$branch])) ; then # If the desired $branch was never pulled to local repo...

          printf "  $(_S B)git pull ${origin_name} ${branch}\n$(_S)"
          if ! git pull "$origin_name" "$branch" --quiet ; then
            errors+=("  $(_S R)Skipped:$(_S E)${req_params}\n   Reason: Execution of the following failed: git pull ${origin_name} ${branch}\n$(_S)")
            printf "$(_S R S)ERROR: $(_S E)Execution of the following failed: git pull ${origin_name} ${branch}\n$(_S)" >&2 && continue
          fi
        fi
        printf "  $(_S B)git checkout ${branch}\n$(_S)"
        if ! git checkout "$branch" --quiet; then
          errors+=("  $(_S R)Skipped:$(_S E)${req_params}\n   Reason: Execution of the following failed: git checkout ${branch}\n$(_S)")
          printf "$(_S R S)ERROR: $(_S E)Execution of the following failed: git checkout ${branch}\n$(_S)" >&2 && continue
        fi
      else 
        printf "  $(_S B)git pull ${origin_name} ${branch}\n$(_S)"
        if ! git pull "$origin_name" "$branch" --quiet ; then
          # We still pull even though the branch was found locally. But we can recover if this fails by using local branch.
          errors+=("  $(_S Y S)Warning: $(_S E)\`git pull ${origin_name} ${branch}\` failed but local branch was found and will be used.\n$(_S)")
          printf "$(_S Y S)WARNING: $(_S E)\`git pull ${origin_name} ${branch}\` failed but local branch was found and will be used.\n$(_S)"
        fi 
      fi

      #.... switch commit, if specifed ..............................

      if ! [[ -z "$commit" ]] ; then 
        local commit_backup="" # empty means not a tag search, full means it's backup of

        local git_log=""

        if [[ "$commit" =~ '(^tag[:=].+|\(tag[:=].*\))' ]] ; then 
          # if commit is (tag:TAGVAL) OR (tag=TAGVAL) OR tag:TAGVAL OR tag=TAGVAL then 
          # get TAGVAL and search for it in git long only containing commits that have tags:
          local first_idx=5
          local last_idx=-1
          if [[ "${commit[1]}" == "(" ]] ; then 
            first_idx=6
            last_idx=-2
          fi
          # Get tag substring and remove leanding/trailing spaces;
          local tag=$(echo "${commit[$first_idx,$last_idx]}" | xargs)
          commit_backup="$commit"
          commit="(tag: $tag" # reform to format seen in git log output (leaving off ')' is intentional!)
          echo "$(_S D)Searching for tag \"$tag\" in \n  $(_S B)git_log=\$(git --no-pager log --no-walk --tags --oneline --pretty='%h%d %as (%an) %s')$(_S)"
          git_log=$(git --no-pager log --no-walk --tags --oneline --pretty='%h%d %as (%an) %s') # only tagged
        else
          echo "$(_S D)Searching for \"$commit\" in\n  $(_S B)git_log=\$(git --no-pager log --tags --pretty='%h%d %as (%an) %s'$(_S)"
          git_log=$(git --no-pager log --tags --pretty='%h%d %as (%an) %s') # all commits, but also showing tagged
        fi
        # local curr_hash=$(git rev-parse --short HEAD)
        # local curr_commit=$(echo $git_log | grep $curr_hash)

        # printf "Currently: ${curr_commit} (hash: $curr_hash)\n"
        # if ! echo $curr_commit | grep -q $commit ; then
          local commit_target=$(echo $git_log | grep $commit)
          local shorthash=""
          ! [[ -z "$commit_target" ]] && shorthash=$(echo $commit_target | cut -d " " -f1)
          if [[ -z "$shorthash" ]] ; then
            if [[ -z "$commit_backup" ]] ; then # tag search failed: retry as normal log search
              commit_target=$(echo $git_log | grep $commit_backup)
              ! [[ -z "$commit_target" ]] && shorthash=$(echo $commit_target | cut -d " " -f1)
            fi
            if [[ -z "$shorthash" ]] ; then
              errors+=("  $(_S R)Skipped:$(_S E)${req_params}\n   Reason: Commit log search string \"${req_params[3]}\" not found in git log\n$(_S)")
              printf "$(_S R S)ERROR: $(_S E)Commit log search string \"${req_params[3]}\" not found in git log! \n$(_S)" >&2 && continue
            fi
          fi
          printf "$(_S D)Found commit: \"${commit_target}\". Running:\n  $(_S B)git switch \"$shorthash\" --detach\n$(_S D)"
          git switch "$shorthash" --detach && printf "$(_S)"
        # else
        #   printf "No need to switch commits.\n"
        # fi
      fi

      #.... execute hooks, if specifed ..............................

      gdm_linker() {
        local GDM_GLOB_STORE_PATH="$1"
        local repo_dirname="$2"
        local project_path="$3"
        local GDM_MODULES_DIRNAME="$4"

        if ! [ -d "${project_path}/${GDM_MODULES_DIRNAME}" ] ; then
          printf "  $(_S B)mkdir ./${GDM_MODULES_DIRNAME}\n$(_S)" 
          if ! mkdir "${project_path}/${GDM_MODULES_DIRNAME}" ; then 
            printf "$(_S R S)ERROR: $(_S E)dm_linker could not create ./${GDM_MODULES_DIRNAME}! \n$(_S)" >&2 
            return 1
          fi
        elif [ -d "${project_path}/${GDM_MODULES_DIRNAME}/${repo_dirname}" ] ; then
          printf "  $(_S B)rm -rf ./${GDM_MODULES_DIRNAME}/${repo_dirname}$(_S)\n"
          rm -rf "${project_path}/${GDM_MODULES_DIRNAME}/${repo_dirname}"
        fi
        # Options for making hard link:
        # cp -al $src $dest # https://unix.stackexchange.com/a/202431
        # cp -lR $src $dest # https://superuser.com/a/1523307
        local result
        printf "  $(_S B)cp -al \"\$GDM_GLOB_STORE_PATH/${repo_dirname}\" \"./${GDM_MODULES_DIRNAME}/${repo_dirname}\n$(_S)"
        if ! result=$(cp -al "${GDM_GLOB_STORE_PATH}/${repo_dirname}" "${project_path}/${GDM_MODULES_DIRNAME}/${repo_dirname}" 2>&1); then
          printf "$(_S R S)ERROR: $(_S E)gdm_linker): ${result}\n$(_S)" >&2
          return 1
        fi
        # Register that the requirement as has been added to GDM_MODULES_DIRNAME so we can clean up (rm un-required) afterward:
        LINKED_MODULES+=("./${GDM_MODULES_DIRNAME}/${repo_dirname}") 
      }

      if ! [[ -z "$pre_link_hook" ]] ; then 
        printf "$(_S D)Executing pre_link_hook (${pre_link_hook})\n$(_S)"
        if ! eval ${pre_link_hook} "$GDM_GLOB_STORE_PATH" "$repo_dirname" "$CALLER_DIR" "$GDM_MODULES_DIRNAME" ; then
          errors+=("  $(_S R S)ERROR:$(_S E) ${req_params}\n   Reason: Execution of provided hook, ${pre_link_hook}, FAILED! Skipping any remaining. \n$(_S)")
          printf "$(_S R S)ERROR: $(_S E)Execution of provided hook, ${pre_link_hook}, FAILED! Skipping any remaining. $(_S)\n"  >&2 && continue
        fi
      fi

      if [[ -z "$linker_bypass_hook" ]] ; then 
        printf "$(_S D)Executing gdm_linker\n$(_S)"
        if ! gdm_linker "$GDM_GLOB_STORE_PATH" "$repo_dirname" "$CALLER_DIR" "$GDM_MODULES_DIRNAME" ; then
          errors+=("  $(_S R S)ERROR:$(_S E) ${req_params}\n   Reason: gdm_linker failed! $(_S)\n")
          printf "$(_S R S)ERROR: $(_S E)gdm_linker FAILED! \n$(_S)"  >&2 && continue
        fi
      else
        printf "Executing linker_bypass_hook (${linker_bypass_hook}) \n"
        if ! eval ${linker_bypass_hook} "$GDM_GLOB_STORE_PATH" "$repo_dirname" "$CALLER_DIR" "$GDM_MODULES_DIRNAME" ; then
          errors+=("  $(_S R S)ERROR:$(_S E) ${req_params}\n   Reason: Execution of link-bypassing hook, ${linker_bypass_hook}, FAILED! \n$(_S)")
          printf "$(_S E)ERROR:$(_S E)  Execution of link-bypassing hook, ${linker_bypass_hook}, FAILED! \n$(_S)"  >&2 && continue
        fi
      fi
      cd "$CALLER_DIR"
    done

    printf "------------------------------------------------------------\n"
    
    cd "$CALLER_DIR" # just in case last loop cut out (continue) early

    printf "$(_S D)Creating link-tracker(s)\n$(_S)"   
    for _module in $LINKED_MODULES ; do
      
      local linked_repo_dirname=${_module:t:r}
      # echo "\nLINKED_MODULE: $_module linked_repo_dirname: $linked_repo_dirname"
      # echo "repo_dirname: $repo_dirname"
      # if [ -d "${GDM_GLOB_STORE_PATH}/${repo_dirname}" ] ; then  # this was surely wrong!?
      if [ -d "${GDM_GLOB_STORE_PATH}/${linked_repo_dirname}" ] ; then 
        local src_tracker="${GDM_GLOB_STORE_PATH}/${linked_repo_dirname}-link-tracker"
        local req_tracker="${CALLER_DIR}/${GDM_MODULES_DIRNAME}/${linked_repo_dirname}-link-tracker"
        if ! [ -f "${src_tracker}" ] ; then
          printf "  $(_S B)touch $GDM_MODULES_DIRNAME/${linked_repo_dirname}-link-tracker && echo \"\\\"\$inode_num\\\" \\\"\$GDM_GLOB_STORE_PATH/${linked_repo_dirname}\\\"\" > $GDM_MODULES_DIRNAME/${linked_repo_dirname}-link-tracker\n$(_S)"
          touch $src_tracker
          local inode_num=$(ls -i $src_tracker | awk '{print $1;}')
          echo "\"$inode_num\" \"${GDM_GLOB_STORE_PATH}/${linked_repo_dirname}\"" > $src_tracker
        fi
        [ -f "${req_tracker}" ] && rm "$req_tracker"
        ln "$src_tracker" "$req_tracker"
      fi
    done

    printf "$(_S D)Searching for unused dependencies in ./$GDM_MODULES_DIRNAME ...\n$(_S D)"
    local req_modules_cnt=${#LINKED_MODULES[@]}
    local found_modules=("${(@f)$(gdm --list-modules)}")
    local found_modules_cnt=${#found_modules[@]}
    if [[ $found_modules_cnt -gt $req_modules_cnt ]]; then
      printf "$(_S D)${req_modules_cnt} required modules in ./${GDM_MODULES_DIRNAME}\n"
      printf "${found_modules_cnt} total modules found in ./${GDM_MODULES_DIRNAME}\n"
      printf "  Removing unused from ${GDM_MODULES_DIRNAME}....$(_S)\n"
      for _module in $found_modules ; do

        if ! (($LINKED_MODULES[(Ie)$_module])) ; then 
          local unreq_loc_repo_dirname=${_module:t:r}

          # Remove only if ${unreq_loc_repo_dirname}-link-tracker is found 
          if ! [ -f "${_module}-link-tracker" ] ; then
            errors+=("  $(_S Y S)Warning: $(_S E)untracked module \"${_module}\" was found but not removed.\n$(_S)")
            printf " $(_S Y S)Warning: $(_S E)untracked module \"${_module}\" was found but not removed.\n$(_S)"  >&2 && continue
          fi
          # Remove only if ${unreq_loc_repo_dirname} is found in global store
          if ! [ -d  "${GDM_GLOB_STORE_PATH}/${unreq_loc_repo_dirname}" ] ; then
            errors+=("  $(_S Y S)Warning: $(_S E)unknown module \"${_module}\" was found but not removed.\n$(_S)")
            printf " $(_S Y S)Warning: $(_S E)unknown module \"${_module}\" was found but not removed.\n$(_S)"  >&2 && continue
          fi

          printf "  $(_S B)rm -rf ${_module}$(_S D)"
          if ! rm -rf "${_module}" ; then printf "...Done.\n$(_S)"
          else
            printf "...$(_S R S)Failed! \n$(_S)" 
            errors+=("  $(_S R)Unable to remove ${_module}\n$(_S)")
          fi
          printf "  $(_S B)rm ${_module}-link-tracker$(_S D)"
          if rm "${_module}-link-tracker" ; then printf "...Done.\n$(_S)"
          else
            printf "...$(_S R S)Failed! \n$(_S)" 
            errors+=("  $(_S R)Unable to remove ${_module}-link-tracker\n$(_S R)")
          fi  
        fi
      done
    fi
    gdm --clean-store
    
    printf "---- RESULT -----------------------------------------\n"
    if [ ${#errors[@]} -ne 0 ] ; then
      printf "Completed, with the following $(_S R)errors$(_S)/$(_S Y)warnings:\n$(_S)"
      printf $errors >&2
    else
      printf "$(_S G S)Completed without errors! \n$(_S)"
    fi

  #___________________________________________________________________________________________
  # List project dependencies found in $GDM_MODULES_DIRNAME
  elif [[ "$1" =~ ${ARGS[list_modules]} ]] ; then
    local gdm_modules_dirpath="${CALLER_DIR}/${GDM_MODULES_DIRNAME}"
    if ! [ -d "${gdm_modules_dirpath}" ] ; then
      echo "${gdm_modules_dirpath} does not exist\n" >&2
      return 1
    fi
    cd "${gdm_modules_dirpath}"
    for _item in * ; do [ -d "${_item}" ] && printf "./${GDM_MODULES_DIRNAME}/${_item}\n" ; done
    cd "$CALLER_DIR"

  #___________________________________________________________________________________________
  # List original repos found in $GDM_GLOB_STORE_PATH
  elif [[ "$1" =~ ${ARGS[list_store]} ]] ; then
    if ! [ -d "${GDM_GLOB_STORE_PATH}" ] ; then
      echo "${GDM_GLOB_STORE_PATH} (GDM_GLOB_STORE_PATH) does not exist\n"  >&2
      return 1
    fi
    cd "${GDM_GLOB_STORE_PATH}"
    for _item in * ; do [ -d "${_item}" ] && printf "${GDM_GLOB_STORE_PATH}/${_item}\n" ; done
    cd "$CALLER_DIR"

  #___________________________________________________________________________________________
  # remove repos found in $GDM_GLOB_STORE_PATH that are not referenced (using *-link-tracker as proxy)
  elif [[ "$1" =~ ${ARGS[clean_store]} ]] ; then
    ! gdm-verify-paths "$CALLER_DIR" "--quiet-pass" && return 1;
    printf "$(_S D)Searching for unused global dependencies in \$GDM_GLOB_STORE_PATH ...\n$(_S)"
    local stored_repos=("${(@f)$(gdm --list-store)}")

    for _stored_repo_path in $stored_repos ; do
      
      local _stored_repo_name=${_stored_repo_path:t:r}
      local src_tracker="${GDM_GLOB_STORE_PATH}/${_stored_repo_name}-link-tracker"
      
      if [ -f "$src_tracker" ] ; then
        local tracker_details=( ${(Q)${(Z+C+)$(ls -li "$src_tracker")}} )
        local tracker_inode="${tracker_details[1]}"
        local tracker_refcount="${tracker_details[3]}"

        local inode_storepath=( ${(Q)${(Z+C+)$(cat "$src_tracker")}} )
        local inode_num="${inode_storepath[1]}"
        local store_path_tracked="${inode_storepath[2]}"


        if [[ "$store_path_tracked" != "$_stored_repo_path" ]] ; then
          printf "$(_S Y S)WARNING: $(_S E)\`cat \${GDM_GLOB_STORE_PATH}/${_stored_repo_name}-link-tracker\` shows it's tracking ${store_path_tracked}.\n$(_S)"
        elif [[ $tracker_inode -ne $inode_num ]] ; then
          printf "$(_S Y S)WARNING: $(_S E)\`cat \${GDM_GLOB_STORE_PATH}/${_stored_repo_name}-link-tracker\` shows an inode that is not it's own! \n$(_S)"
          
        elif [[ $tracker_refcount -eq 1 ]] ; then # REMOVE 
          printf "  Removing unused: $(_S B)rm -rf \"\$GDM_GLOB_STORE_PATH/$_stored_repo_name\" && rm \"\$GDM_GLOB_STORE_PATH/${_stored_repo_name}-link-tracker\" $(_S)\n"
          rm -rf "$_stored_repo_path" # || we have a tracker not tracking anything, which is fine I guess?
          rm "$src_tracker"
        else printf "  $(_S D)Keeping \$GDM_GLOB_STORE_PATH/${_stored_repo_name} [used in $(( $tracker_refcount - 1))]\n$(_S)"
        fi
      else 
        if $REMOVE_UNTRACKED_GLOBS ; then
          printf "  Removing untracked: $(_S B)rm -rf \"\$GDM_GLOB_STORE_PATH/$_stored_repo_name\"$(_S)\n"
          rm -rf "$_stored_repo_path"
        fi
      fi
    done

  #___________________________________________________________________________________________
  else
    printf "Something went wrong! \n" >&2
    return 1
  fi
}


local gdm_conf_param_names=(REPOSITORY BRANCH COMMIT_SEARCH REPO_DIRNAME PRELINK_HOOK LINK_BYPASS)
local gdm_conf_raw_lines=()
local gdm_conf_file_code=99
local gdm_conf_filename_default="./gdm_conf.zsh"
local gdm_conf_filename=""


_gdm_conf_params () {
  local quiet=false
  (($@[(Ie)--quiet])) && quiet=true

  local debug=false
  (($@[(Ie)--debug])) && debug=true

  if [[ $1 == "readfile" ]] ; then
    gdm_conf_raw_lines=()
    if [[ -z "$gdm_conf_filename" ]]; then
      local gdm_conf_filename="$2"
      [[ -z "$gdm_conf_filename" ]] ||  [[ "$gdm_conf_filename" == "--quiet" ]] && 
        gdm_conf_filename="$gdm_conf_filename_default"
    fi
    local file="$gdm_conf_filename"
    
    ! [[ -f "$file" ]] && 
      gdm_conf_file_code=1 && 
      ! $quiet && printf "$(_S R S)ERROR: $(_S E)\"$file\" file not found! \n$(_S)" >&2 && 
      return $gdm_conf_file_code ;

    local conf_doc=$(source ./gdm_conf.zsh)
    [[ -z "$conf_doc" ]] && 
      gdm_conf_file_code=2 && 
      ! $quiet && printf "$(_S R S)ERROR: $(_S E)\"$file\" has no output! \n$(_S)" >&2 && 
      return $gdm_conf_file_code ;
    local gdm_conf_lines_temp=("${(f)$(echo $conf_doc)}")

    for line in $gdm_conf_lines_temp ; do
      ! [[ "$line" =~ '^ *#' ]] && gdm_conf_raw_lines+=($line)
    done
    [[ ${#gdm_conf_raw_lines[@]} -eq 0 ]] && 
      gdm_conf_file_code=3 && 
      ! $quiet && printf "$(_S Y S)WARNING: $(_S E)\"$file\" has no requirements! \n$(_S)" >&2 && 
      return $gdm_conf_file_code ;

    ! $quiet && printf "Found ${#gdm_conf_raw_lines[@]} requirements in  \"$file\"\n"
    gdm_conf_file_code=0

  elif [[ $1 =~ '^(req|requirement)[-_](count|cnt)' ]] ; then printf ${#gdm_conf_raw_lines[@]}

  elif [[ $1 =~ '^(req|requirement)\[[1-9][0-9]*\]$' ]]  ; then
    if [[ $gdm_conf_file_code -ne 0 ]] ; then
      [[ $gdm_conf_file_code -eq 99 ]] && 
        $quiet && _gdm_conf_params readfile --quiet || _gdm_conf_params readfile
    fi
    local req_idx=$(echo $1 | cut -d "[" -f2 | cut -d "]" -f1) 
    [[ $req_idx -gt ${#gdm_conf_raw_lines[@]} ]] && echo "NO MORE" && return 1 # indicating no more requirements to be read
    local requirement_params_raw=( ${(Q)${(Z+C+)${gdm_conf_raw_lines[$req_idx]}}} )
    local repo_remote_url=""
    local requirement_params=()
    
    for ((i = 1; i <= $#gdm_conf_param_names; i++)) ; do
      local req_param="${requirement_params_raw[$i]}"

      if [[ ${gdm_conf_param_names[$i]} == REPOSITORY ]] ; then
        repo_remote_url=$(git_expand_remote_url ${req_param}) 
        req_param="$repo_remote_url"

      elif [[ ${gdm_conf_param_names[$i]} == BRANCH ]] ; then
        if [[ -z  "$req_param" ]] ; then
          req_param=$(git_remote_url_default_branch $repo_remote_url) && 
            $debug && echo "BRANCH defaulted: $req_param"
        else $debug && echo "BRANCH provided: $req_param"
        fi
      elif [[ ${gdm_conf_param_names[$i]} == REPO_DIRNAME ]] ; then
        if [[ -z  "$req_param" ]] ; then
          req_param=${repo_remote_url:t:r} && $debug && echo "REPO_DIRNAME defaulted: $req_param"
        else $debug && echo "REPO_DIRNAME provided: $req_param"
        fi
      fi
      requirement_params+=("\"${req_param}\"")
    done
    echo "$requirement_params"
  else 
    echo "error"
  fi
}


git_expand_remote_url() {
  # Errors: result in no output and $? return code being non-zero. Non-errors echo clonable remote_url and return 0
  local remote_url="$1"

  [[ "$remote_url" != *".git" ]] && remote_url="${remote_url}.git"

  if ! git ls-remote --exit-code "$remote_url" >/dev/null 2>&1 ; then
    local fwslashes=$(echo "$remote_url" | grep -o "/"  | wc -l | xargs)

    if [[ $fwslashes == 1 ]] ; then   # github is assumed...
      remote_url="https://github.com/$remote_url"
    elif [[ $fwslashes == 2 ]] ; then # incomplete url but with domain...
      remote_url="https://$remote_url"
    else
      return 1  # error: invalid or could not expand to valid url for a clonable git repository.
    fi
    if ! git ls-remote --exit-code "$remote_url" >/dev/null 2>&1 ; then
      return 1 # error: invalid or could not expand to valid url for a clonable git repository.
    fi
  fi
  echo "$remote_url"
  return 0
}

git_remote_url_default_branch() {
  # Errors: result in no output and $? return code being non-zero. Non-errors echo default branch and return 0
  local def_br="$(git ls-remote --symref --quiet "$1" HEAD  >/dev/null 2>&1 | awk '/^ref:/ {sub(/refs\/heads\//, "", $2); print $2}')"
  [[ -z $def_br ]] &&  return 1;
  echo "$def_br" && return 0;
}

function _S() { # S for STYLE
  # USAGE: 
  #  echo -e "$(_S R E)red italics$(_S)"
  #  echo -e "$(_S R E)ERROR: $(_S E)just italics\!$(_S)"
  declare -A cLU # code lookup
  cLU[S]=1 # Strong (bold)
  cLU[D]=2 # Dim
  cLU[E]=3 # Emphasis (italic)
  cLU[U]=4 # Underline
  cLU[F]=5 # Flash (blink)
  cLU[6]=6 # ?
  cLU[I]=7 # Invert FG/BG colors
  cLU[R]=31 # Red
  cLU[G]=32 # Green
  cLU[Y]=33 # Yellow
  cLU[B]=34 # Blue
  cLU[M]=35 # Magenta
  cLU[C]=36 # Cyan
  
  local seq="\e[0m"
  [ $# -eq 0 ] && print "$seq" && return 0;
  seq="${seq}\e["

  for var in "$@" ; do seq="${seq}${cLU[$var]};" ; done
  print "${seq[1,-2]}m" # remove last ; and append m
}


if [[ $ZSH_EVAL_CONTEXT == 'toplevel' ]]; then
  # We're not being sourced so run this script as a command
  gdm $@
fi

